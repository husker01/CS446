import matplotlib.pyplot as plt
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim


class Block(nn.Module):
    """A basic block used to build ResNet."""

    """Initialize a building block for ResNet.
        Argument:
            num_channels: the number of channels of the input to Block, and is also
                          the number of channels of conv layers of Block.
    """

    def __init__(self, num_channels):
        super(Block, self).__init__()
        self.conv1 = nn.Conv2d(num_channels, num_channels, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(num_channels)
        self.conv2 = nn.Conv2d(num_channels, num_channels, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(num_channels)


    def forward(self, x):
        """
        The input will have shape (N, num_channels, H, W),
        where N is the batch size, and H and W give the shape of each channel.

        The output should have the same shape as input.
        """

        out = F.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        return F.relu(x + out)


class ResNet(nn.Module):
    """A simplified ResNet."""

    """Initialize a shallow ResNet.
            Arguments:
                num_channels: the number of output channels of the conv layer
                              before the building block, and also 
                              the number of channels of the building block.
                num_classes: the number of output units.
    """

    def __init__(self, num_channels, num_classes=10):
        super(ResNet, self).__init__()
        self.block1 = nn.Sequential(
            nn.Conv2d(1, num_channels, kernel_size=3, stride=2, padding=1, bias=False),
            nn.BatchNorm2d(num_channels),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)
        )
        self.block2 = Block(num_channels)

        self.block3 = nn.Sequential(
            nn.AdaptiveAvgPool2d((1, 1)),
            nn.Flatten(),
            nn.Linear(num_channels, num_classes))


    def forward(self, x):
        """
        The input will have shape (N, 1, H, W),
        where N is the batch size, and H and W give the shape of each channel.

        The output should have shape (N, 10).
        """
        out = self.block1(x)
        out = self.block2(out)
        out = self.block3(out)
        return out






 
